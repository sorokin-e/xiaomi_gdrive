#!/bin/sh
# GDriveConf version 0.5 by Alexandr Porunov https://github.com/porunov/xiaomi_gdrive
# Google drive configuration script

YI_HACK_PREFIX="/tmp/sd"
gdrive_dir="$YI_HACK_PREFIX/gdrive/"
record_dir="$YI_HACK_PREFIX/record/"

renew_token(){
	while [ 1 ] ;  do
		curl --insecure -H "Host: www.googleapis.com" -H "Content-Type: application/x-www-form-urlencoded" --request POST -o ${gdrive_dir}conf/refreshed_token --data "client_id=${client_id}&client_secret=${client_secret}&refresh_token=${refresh_token}&grant_type=refresh_token" 'https://www.googleapis.com/oauth2/v4/token'
		if [ -f "${gdrive_dir}conf/refreshed_token" ]; then
			if grep -q "access_token" ${gdrive_dir}conf/refreshed_token; then
				break
			else
				echo "ERROR: $(date) : Your refresh_token might has reached the limit. Please configure your google drive access again. Please use configuration scipt."
				echo "ERROR: $(date) : Check ${gdrive_dir}conf/refreshed_token for detailed information"
			fi
		else
			echo "WARNING: $(date) : Can not refresh token. Please check internet conectivity"
		fi
		check_log_file
		sleep 15
	done
	access_token=$(cat "${gdrive_dir}conf/refreshed_token" | ${gdrive_dir}./JSON.sh -b | grep -E '\["access_token"\]' | sed 's/\[.*\][^\"0-9tf]*//g' | sed 's/\"//g')
	if grep -q "refresh_token" ${gdrive_dir}conf/refreshed_token; then
		refresh_token=$(cat "${gdrive_dir}conf/refreshed_token" | ${gdrive_dir}./JSON.sh -b | grep -E '\["refresh_token"\]' | sed 's/\[.*\][^\"0-9tf]*//g' | sed 's/\"//g')
	fi
	echo "access_token='${access_token}'" > ${gdrive_dir}conf/gdrive_token.conf
	echo "refresh_token='${refresh_token}'" >> ${gdrive_dir}conf/gdrive_token.conf

	if grep -q "expires_in" ${gdrive_dir}conf/refreshed_token; then
		expiretion_time=$(cat "${gdrive_dir}conf/refreshed_token" | ${gdrive_dir}./JSON.sh -b | grep -E '\["expires_in"\]' | sed 's/\[.*\][^\"0-9tf]*//g' | sed 's/\"//g')
		#expires_in=`expr $expiretion_time + $(date +%s)`;
		expires_in=$(($expiretion_time + $(date +%s)));
		echo "expires_in=${expires_in}" >> ${gdrive_dir}conf/gdrive_token.conf
	fi
	rm ${gdrive_dir}conf/refreshed_token
}

check_token(){
	if [ ! -z ${expires_in+x} ]; then
		if [ $(date +%s) -ge ${expires_in} ]; then
			renew_token
		fi
	fi
}

configure(){
	echo 'Enter your Client ID: '
	read client_id
	echo 'Enter your Client secret: '
	read client_secret
	echo ""
	echo 'Put this link into your browser:'
	echo 'https://accounts.google.com/o/oauth2/v2/auth?scope=https://www.googleapis.com/auth/drive&state=state&redirect_uri=urn:ietf:wg:oauth:2.0:oob&response_type=code&client_id='$client_id'&access_type=offline'
	echo ""
	echo 'Copy and paste your code here: '

	while [ 1 ] ;  do
		read code
		curl --insecure -H "Host: www.googleapis.com" -H "Content-Type: application/x-www-form-urlencoded" -d "code=${code}&client_id=${client_id}&client_secret=${client_secret}&redirect_uri=urn:ietf:wg:oauth:2.0:oob&grant_type=authorization_code" -o ${gdrive_dir}conf/response https://www.googleapis.com/oauth2/v4/token
		if grep -q "access_token" ${gdrive_dir}conf/response & grep -q "refresh_token" ${gdrive_dir}conf/response; then
			break
		else
			echo "Your code was expired or it is not correct. Please refresh a link in your browser and enter a new valid code: "
		fi
	done

	echo "client_id='${client_id}'" > ${gdrive_dir}conf/gdrive.conf
	echo "client_secret='${client_secret}'" >> ${gdrive_dir}conf/gdrive.conf

	access_token=$(cat "${gdrive_dir}conf/response" | ${gdrive_dir}./JSON.sh -b | grep -E '\["access_token"\]' | sed 's/\[.*\][^\"0-9tf]*//g' | sed 's/\"//g')
	if grep -q "refresh_token" ${gdrive_dir}conf/response; then
		refresh_token=$(cat "${gdrive_dir}conf/response" | ${gdrive_dir}./JSON.sh -b | grep -E '\["refresh_token"\]' | sed 's/\[.*\][^\"0-9tf]*//g' | sed 's/\"//g')
	fi
	echo "access_token='${access_token}'" > ${gdrive_dir}conf/gdrive_token.conf
	echo "refresh_token='${refresh_token}'" >> ${gdrive_dir}conf/gdrive_token.conf

	if grep -q "expires_in" ${gdrive_dir}conf/response; then
		expiretion_time=$(cat "${gdrive_dir}conf/response" | ${gdrive_dir}./JSON.sh -b | grep -E '\["expires_in"\]' | sed 's/\[.*\][^\"0-9tf]*//g' | sed 's/\"//g')
		#expires_in=`expr $expiretion_time + $(date +%s)`;
		expires_in=$(($expiretion_time + $(date +%s)));
		echo "expires_in=${expires_in}" >> ${gdrive_dir}conf/gdrive_token.conf
	fi
	rm ${gdrive_dir}conf/response

	echo ""
	echo "Next step is the folder selection for your data. Do you want to be shown all folders or only root folders?"
	echo "Press Enter to show all folders. To show only root folders type 'root' without quotes and press Enter: "
	read rootFolder

	if [ "$rootFolder" = "root" ]; then
		rootFolder='%20and%20"root"%20in%20parents'
	else
		rootFolder=''
	fi;

	while [ 1 ] ;  do
		curl --insecure -H "Host: www.googleapis.com" -H "Authorization: Bearer ${access_token}" --request GET -o ${gdrive_dir}conf/gDriveFolders 'https://www.googleapis.com/drive/v2/files?q=mimeType="application/vnd.google-apps.folder"%20and%20trashed=false'$rootFolder'&fields=items(id,title)'
		if grep -q "items" ${gdrive_dir}conf/gDriveFolders ; then
			break
		else
			renew_token
		fi
	done

	echo "Select folder where you want to save your files:"
	echo "(If you want to choose root folder do not write anything and press Enter)"
	echo ""

	if [ -f ${gdrive_dir}conf/gDriveFolersIds ]; then
		rm ${gdrive_dir}conf/gDriveFolersIds
	fi

	if [ -f ${gdrive_dir}conf/gDriveFolersTitles ]; then
		rm ${gdrive_dir}conf/gDriveFolersTitles
	fi

	cat ${gdrive_dir}conf/gDriveFolders | ${gdrive_dir}./JSON.sh -b | grep -E '\["items",[0-9]+,"id"\]' | sed 's/\[.*\][^\"]*//g' | sed 's/\"//g' >> ${gdrive_dir}conf/gDriveFolersIds
	cat ${gdrive_dir}conf/gDriveFolders | ${gdrive_dir}./JSON.sh -b | grep -E '\["items",[0-9]+,"title"\]' | sed 's/\[.*\][^\"]*//g' | sed 's/\"//g' >> ${gdrive_dir}conf/gDriveFolersTitles

	rm ${gdrive_dir}conf/gDriveFolders

	i=1

	while read line; do
		echo "${i} - ${line}"
		#i=`expr $i + 1`
		i=$(($i+1))
	done < ${gdrive_dir}conf/gDriveFolersTitles

	rm ${gdrive_dir}conf/gDriveFolersTitles

	echo "Enter a number of a folder (Default folder: root)"
	echo ""
	read folder_number

	folder_id='root'

	if LC_ALL=C awk 'BEGIN{exit(!(ARGV[1] ~ /^[0-9]+$/))}' "$folder_number"
		then
		if [ $folder_number -lt $i ]; then
			if [ $folder_number -gt 0 ]; then
				folder_id=$(sed -n "${folder_number}p" ${gdrive_dir}conf/gDriveFolersIds)
			fi
		fi
	fi

	rm ${gdrive_dir}conf/gDriveFolersIds

	echo "folder_id='${folder_id}'" > ${gdrive_dir}conf/gdrive_folder.conf

	echo "Do you want to enable autoremove?"
	echo "If you enable autoremove then when your google drive free space is less then 600 MB GDriveAutoremove script will try to remove old videos (it will remove only old videos from your folder to get about 1200 MB of free space)"
	echo "WARNING: Do not put your personal data in the same folder where your videos are stored. GDrive autoremove script will delete all old data from that folder."
	echo "If you want to enable autoremove feture type '1' and press Enter. If you do not want to enable autoremove feture then just type Enter. (Default: off): "

	read autoremove

	if [ "${autoremove}" = "1" ]; then
		autoremove='on'
	else
		autoremove='off'
	fi

	echo "autoremove='${autoremove}'" >> ${gdrive_dir}conf/gdrive.conf
	echo ""
	echo "Your configuration files were successfully created"
	echo ""
}

echo "Configuration is started. Wait for several seconds."

if [ ! -d ${gdrive_dir}conf ]; then
  mkdir ${gdrive_dir}conf
fi
if [ ! -d ${gdrive_dir}log ]; then
  mkdir ${gdrive_dir}log
fi
if [ ! -d ${gdrive_dir}tmp ]; then
  mkdir ${gdrive_dir}tmp
fi

#if [ ! -d "$YI_HACK_PREFIX/yi-hack-v4/lib" ]; then
#	mkdir -p $YI_HACK_PREFIX/yi-hack-v4/lib
#fi

#if [ ! -d "$YI_HACK_PREFIX/yi-hack-v4/bin" ]; then
#	mkdir -p $YI_HACK_PREFIX/yi-hack-v4/bin
#fi

#cp ${gdrive_dir}yi-hack-v4/lib/* $YI_HACK_PREFIX/yi-hack-v4/lib/
#cp ${gdrive_dir}yi-hack-v4/bin/* $YI_HACK_PREFIX/yi-hack-v4/bin/

#rm /bin/egrep
#rm /bin/expr
#rm /bin/stat
#rm /bin/wc

#ln -s $YI_HACK_PREFIX/yi-hack-v4/bin/busybox /bin/egrep
#ln -s $YI_HACK_PREFIX/yi-hack-v4/bin/busybox /bin/expr
#ln -s $YI_HACK_PREFIX/yi-hack-v4/bin/busybox /bin/stat
#ln -s $YI_HACK_PREFIX/yi-hack-v4/bin/busybox /bin/wc

sed -e 's/sh \/tmp\/sd\/gdrive\/GDrive\(Uploader\|Autoremover\)//g' -i $YI_HACK_PREFIX/yi-hack/startup.sh
echo "sh ${gdrive_dir}GDriveUploader" >> $YI_HACK_PREFIX/yi-hack/startup.sh
echo "sh ${gdrive_dir}GDriveAutoremover" >> $YI_HACK_PREFIX/yi-hack/startup.sh

if [ -f ${gdrive_dir}gdrive_folder.index ]; then
	rm ${gdrive_dir}gdrive_folder.index
fi

if [ -f ${gdrive_dir}gdrive_file.index ]; then
	rm ${gdrive_dir}gdrive_file.index
fi

configure
